Parameters:
  ClusterName:
    Type: String
    Description: "The name of the ECS cluster"

  ClusterRegion:
    Type: String
    Default: "us-east-1"
    Description: "The region of the ECS cluster (default us-east-1)"

  S1AgentImage:
    Type: String
    Default: "containers.sentinelone.net/cws-agent/s1agent:25.1.1-ea"
    Description: "The s1 agent full image path (repo:tag)"

  ImagePullSecret:
    Type: String
    Description: "Specify the name of the image pull secret (created outside this form)"

  TaskRoleArn:
    Type: String
    Description: "Specify the task role ARN (created outside this form)"

  ExecutionRoleArn:
    Type: String
    Description: "Specify the execution role ARN (created outside this form)"

  SiteToken:
    Type: String
    Default: ""
    Description: "Set site token to connect to the console."

  LogLevel:
    Type: String
    Default: "info"
    AllowedValues:
      - "info"
      - "error"
      - "warning"
      - "debug"
      - "trace"
    Description: "Agent log level - info, error, warning, debug, trace (defaults to 'info')"

  DebuggingEnabled:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: "To enable debugging, set to 'true'"

  TaskUid:
    Type: Number
    Default: 1000
    Description: "User id of the default task user"

  TaskGid:
    Type: Number
    Default: 1000
    Description: "Group id of the default task user"

  HostMountPath:
    Type: String
    Default: "/host"
    Description: "Host mount path. Leave default unless host path is mounted elsewhere in your environment"

  AgentEnabled:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "To disable the agent, set to 'false'"

  EbpfEnabled:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "To disable EBPF, set to 'false'"

  FipsEnabled:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "To disable FIPS, set to 'false'"

  AgentTaskCPU:
    Type: Number
    Default: 1024
    Description: "Agent task CPU limitation"

  AgentTaskMemory:
    Type: Number
    Default: 3072
    Description: "Agent task memory limitation"

  WatchdogHealthcheckTimeout:
    Type: String
    Default: "15"
    Description: "Timeout for s1 agent watchdog in seconds (default 15 seconds)"

Conditions:
  IsDebuggingEnabled: !Equals [ !Ref DebuggingEnabled, "true" ]

Resources:
  S1AgentTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "s1-agent-task-definition"
      RequiresCompatibilities: ["EC2"]
      NetworkMode: "host"
      TaskRoleArn: !Ref TaskRoleArn
      ExecutionRoleArn: !Ref ExecutionRoleArn
      Cpu: !Ref AgentTaskCPU
      Memory: !Ref AgentTaskMemory
      PidMode: "host"
      ContainerDefinitions:
        - Name: "s1-agent"
          Image: !Ref S1AgentImage
          RepositoryCredentials:
            CredentialsParameter: !Ref ImagePullSecret
          Essential: true
          Command: ["/opt/deployment.sh"]
          Environment:
            - Name: "S1_AGENT_HOST_MOUNT_PATH"
              Value: !Ref HostMountPath
            - Name: "SITE_TOKEN"
              Value: !Ref SiteToken
            - Name: "S1_LOG_LEVEL"
              Value: !Ref LogLevel
            - Name: "S1_AGENT_TYPE"
              Value: "ecs_ec2"
            - Name: "S1_WATCHDOG_HEALTHCHECK_TIMEOUT"
              Value: !Ref WatchdogHealthcheckTimeout
            - Name: "S1_CONTAINER_NAME"
              Value: "s1-agent"
            - Name: "S1_PERSISTENT_DIR"
              Value: "/var/lib/sentinelone"
            - Name: "S1_AGENT_ENABLED"
              Value: !Ref AgentEnabled
            - Name: "S1_FIPS_ENABLED"
              Value: !Ref FipsEnabled
            - Name: "S1_EBPF_ENABLED"
              Value: !Ref EbpfEnabled
          MountPoints:
            - SourceVolume: "host"
              ContainerPath: !Ref HostMountPath
              ReadOnly: false
            - SourceVolume: "docker"
              ContainerPath: "/var/run/docker.sock"
              ReadOnly: false
          LinuxParameters:
            Capabilities:
              Add:
                - "DAC_OVERRIDE"
                - "DAC_READ_SEARCH"
                - "FOWNER"
                - "SETGID"
                - "SETUID"
                - "SYS_ADMIN"
                - "SYS_PTRACE"
                - "SYS_RESOURCE"
                - "SYSLOG"
                - "SYS_CHROOT"
                - "CHOWN"
                - "SYS_MODULE"
                - "KILL"
                - "NET_ADMIN"
                - "NET_RAW"
            InitProcessEnabled: true
          User: !Sub "${TaskUid}:${TaskGid}"
          LogConfiguration:
            Fn::If:
              - IsDebuggingEnabled
              - LogDriver: "awslogs"
                Options:
                  awslogs-group: "/ecs/s1-service-logs"
                  awslogs-region: !Ref ClusterRegion
                  awslogs-stream-prefix: "s1-agent"
              - !Ref "AWS::NoValue"
      Volumes:
        - Name: "host"
          Host:
            SourcePath: "/"
        - Name: "docker"
          Host:
            SourcePath: "/var/run/docker.sock"

  S1AgentDaemonService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: "s1-agent-daemon-service"
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref S1AgentTaskDefinition
      LaunchType: "EC2"
      SchedulingStrategy: "DAEMON"
      EnableExecuteCommand: !If
        - IsDebuggingEnabled
        - true
        - false

  S1AgentCleanupTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: s1-agent-cleanup-task-definition
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Ref ExecutionRoleArn
      ContainerDefinitions:
        - Name: s1-agent-cleanup
          Image: !Ref S1AgentImage
          RepositoryCredentials:
            CredentialsParameter: !Ref ImagePullSecret
          Memory: 128
          Command:
            - "sh"
            - "-c"
            - !Sub "mkdir -p ${HostMountPath}/var/lib/sentinelone/tmp && touch ${HostMountPath}/var/lib/sentinelone/tmp/uninstall_started"
          MountPoints:
            - SourceVolume: host-volume
              ContainerPath: /host
              ReadOnly: false
      Volumes:
        - Name: host-volume
          Host:
            SourcePath: "/"

  S1AgentCleanupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S1AgentCleanup
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt S1AgentCleanupLambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          
          ecs_client = boto3.client('ecs')
          http = urllib3.PoolManager()
          
          def send_response(event, context, status, reason=""):
            """Send response to CloudFormation to signal success or failure."""
            response_body = {
              "Status": status,
              "Reason": reason,
              "PhysicalResourceId": context.log_stream_name if context else "cleanup-task",
              "StackId": event["StackId"],
              "RequestId": event["RequestId"],
              "LogicalResourceId": event["LogicalResourceId"]
            }
          
            encoded_body = json.dumps(response_body)
            print("Sending response to CloudFormation:", encoded_body)
          
            try:
              req = http.request("PUT", event["ResponseURL"], body=encoded_body, headers={"Content-Type": ""})
              print(f"CloudFormation response status: {req.status}")
            except Exception as e:
              print(f"Failed to send response: {e}")
          
          def lambda_handler(event, context):
            print("Received event: " + json.dumps(event, indent=2))
          
            if event['RequestType'] != 'Delete':
              send_response(event, context, "SUCCESS")
              return
          
            cluster_name = event['ResourceProperties']['ClusterName']
            task_definition_arn = event['ResourceProperties']['TaskDefinitionArn']
            
            try:
              container_instances = ecs_client.list_container_instances(cluster=cluster_name)['containerInstanceArns']
              if not container_instances:
                send_response(event, context, "SUCCESS")
                return

              container_details = ecs_client.describe_container_instances(
                cluster=cluster_name,
                containerInstances=container_instances
              )['containerInstances']
              ec2_instance_ids = [container['ec2InstanceId'] for container in container_details]

              for ec2_instance_id in ec2_instance_ids:
                ecs_client.run_task(
                  cluster=cluster_name,
                  taskDefinition=task_definition_arn,
                  launchType='EC2',
                  placementConstraints=[
                    {
                      'expression': f"ec2InstanceId == {ec2_instance_id}",
                      'type': 'memberOf'
                    }
                  ]
                )
              send_response(event, context, "SUCCESS")

            except Exception as e:
              print(f"Error: {str(e)}")
              send_response(event, context, "FAILED", str(e))

  S1AgentCleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S1AgentCleanupLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S1AgentCleanupLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:DescribeTasks
                  - ecs:ListContainerInstances
                  - ecs:DescribeContainerInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  S1AgentCleanup:
    Type: Custom::S1AgentCleanup
    Properties:
      ServiceToken: !GetAtt S1AgentCleanupLambdaFunction.Arn
      ClusterName: !Ref ClusterName
      TaskDefinitionArn: !Ref S1AgentCleanupTaskDefinition
    DependsOn: S1AgentDaemonService
