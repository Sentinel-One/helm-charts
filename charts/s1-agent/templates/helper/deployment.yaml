apiVersion: {{ template "deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "helper.fullname" . }}
  labels:
    {{- include "sentinelone.helper.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "sentinelone.helper.selector.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "sentinelone.helper.labels" . | nindent 8 }}
      {{- if .Values.helper.podAnnotations }}
      annotations:
{{ toYaml .Values.helper.podAnnotations | indent 8 }}
      {{- end }}
    spec:
{{- if .Values.secrets.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.secrets.imagePullSecret }}
{{- end }}
      serviceAccountName: {{ include "sentinelone.serviceAccountName" . }}
      containers:
        - name: helper
          securityContext:
          {{- if and .Values.configuration.env.injection.enabled (eq (include "serverlessOnlyMode" .) "true") }}
            {{- include "serverlessAgentContainerOwner" . | nindent 12 }}
          {{- else }}
            {{- toYaml .Values.helper.securityContext | nindent 12 }}
          {{- end }}
          image: "{{ include "helper.full_url" . }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.configuration.imagePullPolicy }}
          envFrom:
          - configMapRef:
              name: {{ include "helper.config.name" .}}
          env:
          - name: S1_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: S1_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
{{- if .Values.configuration.cluster.name }}
          - name: CLUSTER_NAME
            value: {{ .Values.configuration.cluster.name }}
{{- end }}
          - name: SERVER_PORT
            value: "{{ include "service.target_port" . }}"
          - name: SERVER_CRT
            valueFrom:
              secretKeyRef:
                name: {{ include "helper.secret.name" . }}
                key: tls.crt
          - name: SERVER_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "helper.secret.name" . }}
                key: tls.key
          - name: SERVER_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "helper_token.secret.name" . }}
                key: server-token
          - name: LOG_LEVEL
            value: {{ .Values.configuration.env.helper.log_level }}
          - name: S1_CLIENT_TIMEOUT
            value: "{{ .Values.configuration.env.helper.client_timeout }}"
          - name: AGENT_INJECTION_ENABLED
            value: "{{ .Values.configuration.env.injection.enabled }}"
{{- if .Values.configuration.env.injection.enabled }}
          - name: AGENT_INJECTION_CONFIG_FILE
            value: "/s1-helper/agent-injection/config.yaml"
        {{- if eq (include "serverlessOnlyMode" .) "true" }}
          - name: S1_HELPER_RBAC_NAME
            value: {{ include "helper.rbac.name" . }}
        {{- end }}
        {{- if and (include "site_key.secret.create" .)  (include "site_key.secret.name" .) }}
          - name: SITE_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "site_key.secret.name" . }}
                key: site-key
        {{- end }}
{{- end }}
          - name: AGENT_CONTAINER_NAME
            value: "{{ include "agent.container_name" . }}"
          ports:
            - name: https
              containerPort: {{ include "service.target_port" . }}
              protocol: TCP
{{- if .Values.helper.probe }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ include "service.target_port" . }}
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: {{ include "service.target_port" . }}
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
{{- end }}
          resources:
            {{- include "helperResources" . | nindent 12 }}
{{- if .Values.configuration.env.injection.enabled }}
          volumeMounts:
          - name: agent-injection-config
            mountPath: /s1-helper/agent-injection
    {{- if eq (include "serverlessOnlyMode" .) "true" }}
        {{- include "serverlessAgentContainer" . | nindent 8 }}
          - name: S1_AGENT_CONTAINER_NAME
            value: "{{ include "agent.container_name" . }}"
          - name: S1_HELPER_HOST
            value: {{ include "service.name" . }}
          - name: S1_RESTART_POLICY
            value: Always
      shareProcessNamespace: true
    {{- end }}
      volumes:
        - name: agent-injection-config
          configMap:
            name: {{ include "agentInjection.name" . }}
{{- end }}
    {{- with .Values.helper.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
{{- if default .Values.agent.priorityClassName .Values.helper.priorityClassName }}
      priorityClassName: {{ default .Values.agent.priorityClassName .Values.helper.priorityClassName }}
{{- end }}
    {{- with .Values.helper.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.helper.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
