{{- if and
  (or
    (not .Values.configuration.env.injection.enabled)
    (eq (include "serverlessOnlyMode" .) "false")
  )
  (not .Values.configuration.inventory_only)
  (eq .Values.configuration.deployment_type "argocd")
}}
{{- $cleanupTag := default (now | unixEpoch) .Values.cleanupLabel }}
{{- $valuesAffinity := .Values.agent.affinity | default dict }}
{{- $argocdNodeAffinity := dict "requiredDuringSchedulingIgnoredDuringExecution" (dict "nodeSelectorTerms" (list (dict "matchExpressions" (list (dict "key" "k8s.amazee.io/node-cleanup-id" "operator" "NotIn" "values" (list (printf "%s" $cleanupTag))))))) }}
{{- $mergedNodeAffinity := mergeOverwrite (get $valuesAffinity "nodeAffinity" | default dict) $argocdNodeAffinity }}
{{- $finalAffinity := dict "nodeAffinity" $mergedNodeAffinity }}

apiVersion: {{ template "daemonset.apiVersion" . }}
kind: DaemonSet
metadata:
  annotations:
    "argocd.argoproj.io/hook": PostDelete
    "argocd.argoproj.io/hook-delete-policy": HookSucceeded
  name: argocd-post-delete-hook
spec:
  selector:
    matchLabels:
      app: argocd-post-delete-hook
  template:
    metadata:
      labels:
        app: argocd-post-delete-hook
    spec:
{{- if .Values.secrets.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.secrets.imagePullSecret }}
{{- end }}
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      securityContext:
        runAsUser: {{ .Values.configuration.env.agent.pod_uid }}
        runAsGroup: {{ .Values.configuration.env.agent.pod_gid }}
      affinity: {{- toYaml $finalAffinity | nindent 8 }}
      containers:
        - name: "{{ include "agent.container_name" . }}-cleanup-labeler"
          image: "{{ include "helper.full_url" . }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.configuration.imagePullPolicy }}
          env:
            - name: S1_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command: [ "/bin/bash", "-c" ]
          args:
            - >
              set -x;
              tar xzf /s1-helper/kubectl.tar.gz -C /;
              /s1-helper/kubectl label node "$S1_NODE_NAME" k8s.amazee.io/node-cleanup-id={{ $cleanupTag }} --overwrite;
              echo "Done";
      initContainers:
        - name: "{{ include "agent.container_name" . }}-cleanup"
          image: "{{ include "agent.full_url" . }}"
          command: ["/bin/bash", "-c"]
          args: ["/opt/deployment.sh k8s_agent_cleanup"]
          imagePullPolicy: {{ default "IfNotPresent" .Values.configuration.imagePullPolicy }}
          env:
            - name: S1_AGENT_TYPE
              value: "k8s"
            - name: S1_PERSISTENT_DIR
              value: "{{ include "persistentDir" . }}"
          volumeMounts:
            - name: host
              mountPath: {{ default "/host" .Values.configuration.env.agent.host_mount_path }}
              mountPropagation: HostToContainer
{{- if .Values.configuration.platform.gke.autopilot }}
              readOnly: true
            - name: persistence
              mountPath: {{ include "persistentDir" . }}
{{- end }}
      volumes:
        - name: host
          hostPath:
            path: /
    {{- with .Values.agent.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if default .Values.helper.priorityClassName .Values.agent.priorityClassName }}
      priorityClassName: {{ default .Values.helper.priorityClassName .Values.agent.priorityClassName }}
    {{- end }}
    {{- with .Values.agent.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end }}
